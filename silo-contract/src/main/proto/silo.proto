//
// Protocol buffers definition for Silo server
//
syntax = "proto3";
package pt.tecnico.sauron.silo.grpc;
import "google/protobuf/timestamp.proto";
import "google/type/latlng.proto";

enum Status {
    OK = 0;
    NOK = 1;
    INVALID_ARG = 2;
    INVALID_OBS = 3;
    NULL_OBS = 4;
    NULL_COORDS = 5;
};

message Observable {
    string type = 1;
    string identifier = 2;
}

message Camera {
    string name = 1;
    google.type.LatLng coords = 2;
}

message Observation {
    Observable observated = 1;
    Camera camera = 2;
    google.protobuf.Timestamp time = 3;
}

message CamJoinRequest {
    Camera camera = 1;
}

message CamJoinResponse {
    Status responseStatus = 1;
}

message CamInfoRequest {
    string name = 1;
}

message CamInfoResponse {
    Status responseStatus = 1;
    Camera camera = 2;
}

message ReportRequest {
    string cameraName = 1;
    repeated Observation observations = 2;
}

message ReportResponse {
    Status responseStatus = 1;
}

message TrackRequest {
    Observable identity = 1;
}

message TrackResponse {
    Status responseStatus = 1;
    Observation observation = 2;
}

message TrackMatchRequest {
    Observable identity = 1;
}

message TrackMatchResponse {
    Status responseStatus = 1;
    repeated Observation observations = 2;
}

message TraceRequest {
    Observable identity = 1;
}

message TraceResponse {
    Status responseStatus = 1;
    repeated Observation observations = 2;
}

message ControlPingRequest {
    string inputText = 1;
}

message ControlPingResponse {
    string status = 1;
}

message ControlClearRequest {
    //empty
}

message ControlClearResponse {
    Status status = 1;
}

message ControlInitRequest {
    repeated Observation observation = 1;
}

message ControlInitResponse {
    Status responseStatus = 1;
}

service Sauron {
    rpc CamJoin(CamJoinRequest) returns (CamJoinResponse);
    rpc CamInfo(CamInfoRequest) returns (CamInfoResponse);
    rpc Report(ReportRequest) returns (ReportResponse);
    rpc Track(TrackRequest) returns (TrackRequest);
    rpc TrackMatch(TrackMatchRequest) returns (TrackMatchResponse);
    rpc Trace(TraceRequest) returns (TraceResponse);
    rpc ControlClear(ControlClearRequest) returns (ControlClearResponse);
    rpc ControlPing(ControlPingRequest) returns (ControlPingResponse);
    rpc ControlInit(ControlInitRequest) returns (ControlInitResponse);
}